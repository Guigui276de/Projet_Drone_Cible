#include "motor_controller.hpp"
#include <algorithm>
#include <iostream>

MotorController::MotorController() : Node("motor_controller") {
    subscription_ = this->create_subscription<geometry_msgs::msg::Twist>(
        "cmd_vel", 10, std::bind(&MotorController::cmdVelCallback, this, std::placeholders::_1));

    try {
        serial_ = std::make_unique<boost::asio::serial_port>(io_service_, "/dev/ttyACM0");
        serial_->set_option(boost::asio::serial_port_base::baud_rate(115200));  // Définir le baudrate

        RCLCPP_INFO(this->get_logger(), "Port série ouvert à 115200 bauds.");
    } catch (const std::exception &e) {
        RCLCPP_ERROR(this->get_logger(), "Erreur ouverture port série : %s", e.what());
    }
}

MotorController::~MotorController() {
    if (serial_ && serial_->is_open()) {
        serial_->close();
    }
}

void MotorController::cmdVelCallback(const geometry_msgs::msg::Twist::SharedPtr msg) {
    int v1 = static_cast<int>((msg->linear.x - msg->angular.z) * 100);
    int v2 = static_cast<int>((msg->linear.x + msg->angular.z) * 100);

    v1 = std::max(-255, std::min(255, v1));
    v2 = std::max(-255, std::min(255, v2));

    if (serial_ && serial_->is_open()) {
        std::string command = "V1:" + std::to_string(v1) + " V2:" + std::to_string(v2) + "\n";
        boost::asio::write(*serial_, boost::asio::buffer(command));
        RCLCPP_INFO(this->get_logger(), "Envoyé : %s", command.c_str());
    }
}
